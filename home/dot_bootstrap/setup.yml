---
- name: Setup Environment
  hosts: localhost
  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER | default(ansible_user_id) }}"

    - name: Install dependencies
      become: yes
      package:
        name: "{{ item }}"
        state: present
      loop:
        - bash
        - bash-completion
        - tar
        - libfuse2
        - npm
        - python3-pip
        - bat
        - tree
        - multitail
        - wget
        - unzip
        - emacs
        - fontconfig
        - ripgrep
        - btop
        - fzf
        - git
        - build-essential
        - tmux
        - zsh
      when: ansible_os_family != 'Archlinux'

    - name: Install AUR helper and dependencies (Arch-based)
      block:
        - name: Check if yay is installed
          shell: |
            if command -v yay &> /dev/null; then
              echo "yay is installed"
            else
              echo "yay is not installed"
              exit 1
            fi
          register: yay_check
          ignore_errors: yes

        - name: Install yay
          git:
            repo: https://aur.archlinux.org/yay-git.git
            dest: /opt/yay-git
            clone: yes
          become: yes
          when: yay_check.failed

        - name: Build and install yay
          command: |
            cd /opt/yay-git && makepkg --noconfirm -si
          become: yes
          when: yay_check.failed

        - name: Install dependencies using yay
          command: yay --noconfirm -S base-devel bash bash-completion tar bat tree fastfetch wget unzip fontconfig neovim tmux zsh git btop ripgrep lsd emacs
          become: yes

      when: ansible_os_family == 'Archlinux'

    - name: Change shell to zsh
      become: yes
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    - name: Install Zoxide
      shell: |
        curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
      args:
        executable: /bin/bash

    - name: Install JetBrainsMono Nerd Font
      block:
        - name: Ensure fonts directory
          ansible.builtin.file:
            path: "~{{ remote_regular_user }}/.fonts"
            state: directory
            mode: "0755"
            owner: "{{ remote_regular_user }}"

        - name: Check if Jetbrains Mono exists
          ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
          register: jetbrains_mono_exists
          ignore_errors: true
          changed_when: false

        - name: Download Jetbrains mono
          when: jetbrains_mono_exists is failed
          ansible.builtin.unarchive:
            src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
            dest: "~{{ remote_regular_user }}/.fonts/"
            remote_src: true
            mode: "0755"
            owner: "{{ remote_regular_user }}"

        - name: Download Neovim AppImage
          get_url:
            url: "https://github.com/neovim/neovim/releases/download/stable/nvim.appimage"
            dest: "/usr/local/bin/nvim.appimage"
            mode: "0755"
          become: yes
          when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"

        - name: Set executable permissions for Neovim AppImage
          file:
            path: "/usr/local/bin/nvim.appimage"
            state: file
            mode: "0755"
          become: yes
          when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"

        - name: Extract Neovim AppImage
          command: >
            /usr/local/bin/nvim.appimage --appimage-extract
          args:
            chdir: "/usr/local/bin"
          register: extraction
          ignore_errors: yes
          become: yes
          when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"

        - name: Ensure extraction directory exists
          stat:
            path: "/usr/local/bin/squashfs-root"
          register: extraction_stat
          when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"

        - name: Create symbolic link to Neovim binary
          file:
            src: "/usr/local/bin/squashfs-root/usr/bin/nvim"
            dest: "/usr/local/bin/nvim"
            state: link
          when: extraction_stat.stat is defined and extraction_stat.stat.exists and ansible_distribution == "Ubuntu" and ansible_distribution_version == "22.04"
          become: yes
